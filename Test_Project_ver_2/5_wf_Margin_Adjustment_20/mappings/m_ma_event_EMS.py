# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, Shortcut_to_MA_EVENT_PRE_0


df_0 = spark.sql("""SELECT
  MA_EVENT_ID AS MA_EVENT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT
FROM
  MA_EVENT_PRE""")

df_0.createOrReplaceTempView("Shortcut_to_MA_EVENT_PRE_0")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_MA_EVENT1_1


df_1 = spark.sql("""SELECT
  MA_EVENT_ID AS MA_EVENT_ID,
  OFFER_ID AS OFFER_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MOVEMENT_ID AS MOVEMENT_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,
  BRAND_CD AS BRAND_CD,
  MA_FORMULA_CD AS MA_FORMULA_CD,
  FISCAL_MO AS FISCAL_MO,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  FROM_LOCATION_ID AS FROM_LOCATION_ID,
  SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,
  COMPANY_ID AS COMPANY_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  VENDOR_NAME_TXT AS VENDOR_NAME_TXT,
  MA_PCT_IND AS MA_PCT_IND,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  MA_EVENT""")

df_1.createOrReplaceTempView("Shortcut_to_MA_EVENT1_1")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_MA_EVENT_2


df_2 = spark.sql("""SELECT
  ma_event_id AS MA_EVENT_ID,
  product_id AS PRODUCT_ID,
  country_cd AS COUNTRY_CD,
  start_dt AS START_DT,
  end_dt AS END_DT,
  ma_event_type_id AS MA_EVENT_TYPE_ID,
  ma_event_source_id AS MA_EVENT_SOURCE_ID,
  location_id AS LOCATION_ID,
  ma_event_desc AS MA_EVENT_DESC,
  em_vendor_funding_id AS EM_VENDOR_FUNDING_ID,
  em_comment AS EM_COMMENT,
  em_bill_alt_vendor_flag AS EM_BILL_ALT_VENDOR_FLAG,
  em_alt_vendor_id AS EM_ALT_VENDOR_ID,
  em_alt_vendor_name AS EM_ALT_VENDOR_NAME,
  em_alt_vendor_country_cd AS EM_ALT_VENDOR_COUNTRY_CD,
  em_vendor_id AS EM_VENDOR_ID,
  em_vendor_name AS EM_VENDOR_NAME,
  em_vendor_country_cd AS EM_VENDOR_COUNTRY_CD,
  ma_amt AS MA_AMT,
  ma_max_amt AS MA_MAX_AMT,
  CURRENT_DATE AS UPDATE_DT,
  CURRENT_DATE AS LOAD_DT,
  'I' AS INS_UPD_DEL_FLAG,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_MA_EVENT_PRE_0
WHERE
  ma_event_source_id = 1
  AND ma_event_id NOT IN (
    SELECT
      ma_event_id
    FROM
      Shortcut_to_MA_EVENT1_1
  )
UNION
SELECT
  pre.*,
  CURRENT_DATE update_dt,
  e.load_dt,
  CASE
    WHEN pre.product_id <> e.product_id
    OR pre.country_cd <> e.country_cd
    OR pre.start_dt <> e.start_dt
    OR pre.end_dt <> e.end_dt
    OR pre.location_id <> e.location_id
    OR pre.ma_event_type_id <> e.ma_event_type_id
    OR pre.ma_amt <> e.ma_amt THEN 'U'
    ELSE 'C'
  END ins_upd_del_flag
FROM
  (
    SELECT
      ma_event_id,
      product_id,
      country_cd,
      start_dt,
      end_dt,
      ma_event_type_id,
      ma_event_source_id,
      location_id,
      ma_event_desc,
      em_vendor_funding_id,
      em_comment,
      em_bill_alt_vendor_flag,
      em_alt_vendor_id,
      em_alt_vendor_name,
      em_alt_vendor_country_cd,
      em_vendor_id,
      em_vendor_name,
      em_vendor_country_cd,
      ma_amt,
      ma_max_amt
    FROM
      Shortcut_to_MA_EVENT_PRE_0 MINUS
    SELECT
      ma_event_id,
      product_id,
      country_cd,
      start_dt,
      end_dt,
      ma_event_type_id,
      ma_event_source_id,
      location_id,
      ma_event_desc,
      em_vendor_funding_id,
      em_comment,
      em_bill_alt_vendor_flag,
      em_alt_vendor_id,
      em_alt_vendor_name,
      em_alt_vendor_country_cd,
      em_vendor_id,
      em_vendor_name,
      em_vendor_country_cd,
      ma_amt,
      ma_max_amt
    FROM
      Shortcut_to_MA_EVENT1_1
  ) pre,
  Shortcut_to_MA_EVENT1_1 e
WHERE
  pre.ma_event_id = e.ma_event_id
UNION
SELECT
  e.ma_event_id AS MA_EVENT_ID,
  e.product_id AS PRODUCT_ID,
  e.country_cd AS COUNTRY_CD,
  e.start_dt AS START_DT,
  e.end_dt AS END_DT,
  e.ma_event_type_id AS MA_EVENT_TYPE_ID,
  e.ma_event_source_id AS MA_EVENT_SOURCE_ID,
  e.location_id AS LOCATION_ID,
  e.ma_event_desc AS MA_EVENT_DESC,
  e.em_vendor_funding_id AS EM_VENDOR_FUNDING_ID,
  e.em_comment AS EM_COMMENT,
  e.em_bill_alt_vendor_flag AS EM_BILL_ALT_VENDOR_FLAG,
  e.em_alt_vendor_id AS EM_ALT_VENDOR_ID,
  e.em_alt_vendor_name AS EM_ALT_VENDOR_NAME,
  e.em_alt_vendor_country_cd AS EM_ALT_VENDOR_COUNTRY_CD,
  e.em_vendor_id AS EM_VENDOR_ID,
  e.em_vendor_name AS EM_VENDOR_NAME,
  e.em_vendor_country_cd AS EM_VENDOR_COUNTRY_CD,
  e.ma_amt AS MA_AMT,
  e.ma_max_amt AS MA_MAX_AMT,
  CURRENT_DATE AS UPDATE_DT,
  e.load_dt AS LOAD_DT,
  'R' AS INS_UPD_DEL_FLAG,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  (
    SELECT
      ma_event_id,
      product_id,
      country_cd,
      start_dt,
      end_dt,
      ma_event_type_id,
      ma_event_source_id,
      location_id,
      ma_event_desc,
      em_vendor_funding_id,
      em_comment,
      em_bill_alt_vendor_flag,
      em_alt_vendor_id,
      em_alt_vendor_name,
      em_alt_vendor_country_cd,
      em_vendor_id,
      em_vendor_name,
      em_vendor_country_cd,
      ma_amt,
      ma_max_amt
    FROM
      Shortcut_to_MA_EVENT_PRE_0 MINUS
    SELECT
      ma_event_id,
      product_id,
      country_cd,
      start_dt,
      end_dt,
      ma_event_type_id,
      ma_event_source_id,
      location_id,
      ma_event_desc,
      em_vendor_funding_id,
      em_comment,
      em_bill_alt_vendor_flag,
      em_alt_vendor_id,
      em_alt_vendor_name,
      em_alt_vendor_country_cd,
      em_vendor_id,
      em_vendor_name,
      em_vendor_country_cd,
      ma_amt,
      ma_max_amt
    FROM
      Shortcut_to_MA_EVENT1_1
  ) pre,
  Shortcut_to_MA_EVENT1_1 e
WHERE
  pre.ma_event_id = e.ma_event_id
  AND (
    pre.product_id <> e.product_id
    OR pre.country_cd <> e.country_cd
    OR pre.start_dt <> e.start_dt
    OR pre.end_dt <> e.end_dt
    OR pre.location_id <> e.location_id
    OR pre.ma_event_type_id <> e.ma_event_type_id
    OR pre.ma_amt <> e.ma_amt
  )
UNION
SELECT
  ma_event_id AS MA_EVENT_ID,
  product_id AS PRODUCT_ID,
  country_cd AS COUNTRY_CD,
  start_dt AS START_DT,
  end_dt AS END_DT,
  ma_event_type_id AS MA_EVENT_TYPE_ID,
  ma_event_source_id AS MA_EVENT_SOURCE_ID,
  location_id AS LOCATION_ID,
  ma_event_desc AS MA_EVENT_DESC,
  em_vendor_funding_id AS EM_VENDOR_FUNDING_ID,
  em_comment AS EM_COMMENT,
  em_bill_alt_vendor_flag AS EM_BILL_ALT_VENDOR_FLAG,
  em_alt_vendor_id AS EM_ALT_VENDOR_ID,
  em_alt_vendor_name AS EM_ALT_VENDOR_NAME,
  em_alt_vendor_country_cd AS EM_ALT_VENDOR_COUNTRY_CD,
  em_vendor_id AS EM_VENDOR_ID,
  em_vendor_name AS EM_VENDOR_NAME,
  em_vendor_country_cd AS EM_VENDOR_COUNTRY_CD,
  ma_amt AS MA_AMT,
  ma_max_amt AS MA_MAX_AMT,
  CURRENT_DATE AS UPDATE_DT,
  load_dt AS LOAD_DT,
  'D' AS INS_UPD_DEL_FLAG,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_MA_EVENT1_1
WHERE
  ma_event_source_id = 1
  AND start_dt >= (
    SELECT
      week_dt + 1
    FROM
      days
    WHERE
      day_dt = CURRENT_DATE - 96
  )
  AND ma_event_id NOT IN (
    SELECT
      ma_event_id
    FROM
      Shortcut_to_MA_EVENT_PRE_0
  )""")

df_2.createOrReplaceTempView("SQ_Shortcut_to_MA_EVENT_2")

# COMMAND ----------
# DBTITLE 1, FTR_MA_EVENT_3


df_3 = spark.sql("""SELECT
  MA_EVENT_ID AS MA_EVENT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_MA_EVENT_2
WHERE
  INS_UPD_DEL_FLAG <> 'R'""")

df_3.createOrReplaceTempView("FTR_MA_EVENT_3")

# COMMAND ----------
# DBTITLE 1, UPD_MA_EVENT_4


df_4 = spark.sql("""SELECT
  MA_EVENT_ID AS MA_EVENT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id,
  IFF(
    INS_UPD_DEL_FLAG = 'I',
    'DD_INSERT',
    IFF(
      INS_UPD_DEL_FLAG = 'U',
      'DD_UPDATE',
      IFF(
        INS_UPD_DEL_FLAG = 'C',
        'DD_UPDATE',
        IFF(INS_UPD_DEL_FLAG = 'D', 'DD_DELETE', 'DD_REJECT')
      )
    )
  ) AS UPDATE_STRATEGY_FLAG
FROM
  FTR_MA_EVENT_3""")

df_4.createOrReplaceTempView("UPD_MA_EVENT_4")

# COMMAND ----------
# DBTITLE 1, FTR_MA_EVENT_RESTATE_HIST_5


df_5 = spark.sql("""SELECT
  UPDATE_DT AS LOAD_DT,
  MA_EVENT_ID AS MA_EVENT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_MA_EVENT_2
WHERE
  INS_UPD_DEL_FLAG = 'I'
  OR INS_UPD_DEL_FLAG = 'R'
  OR INS_UPD_DEL_FLAG = 'D'""")

df_5.createOrReplaceTempView("FTR_MA_EVENT_RESTATE_HIST_5")

# COMMAND ----------
# DBTITLE 1, EXP_MA_EVENT_RESTATE_HIST_6


df_6 = spark.sql("""SELECT
  LOAD_DT AS LOAD_DT,
  MA_EVENT_ID AS MA_EVENT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  IFF(INS_UPD_DEL_FLAG = 'R', 'U', INS_UPD_DEL_FLAG) AS INS_UPD_DEL_FLAG_out,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  FTR_MA_EVENT_RESTATE_HIST_5""")

df_6.createOrReplaceTempView("EXP_MA_EVENT_RESTATE_HIST_6")

# COMMAND ----------
# DBTITLE 1, MA_EVENT


spark.sql("""MERGE INTO MA_EVENT AS TARGET
USING
  UPD_MA_EVENT_4 AS SOURCE ON TARGET.MA_EVENT_ID = SOURCE.MA_EVENT_ID
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_UPDATE" THEN
UPDATE
SET
  TARGET.MA_EVENT_ID = SOURCE.MA_EVENT_ID,
  TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID,
  TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD,
  TARGET.START_DT = SOURCE.START_DT,
  TARGET.END_DT = SOURCE.END_DT,
  TARGET.MA_EVENT_TYPE_ID = SOURCE.MA_EVENT_TYPE_ID,
  TARGET.MA_EVENT_SOURCE_ID = SOURCE.MA_EVENT_SOURCE_ID,
  TARGET.LOCATION_ID = SOURCE.LOCATION_ID,
  TARGET.MA_EVENT_DESC = SOURCE.MA_EVENT_DESC,
  TARGET.EM_VENDOR_FUNDING_ID = SOURCE.EM_VENDOR_FUNDING_ID,
  TARGET.EM_COMMENT = SOURCE.EM_COMMENT,
  TARGET.EM_BILL_ALT_VENDOR_FLAG = SOURCE.EM_BILL_ALT_VENDOR_FLAG,
  TARGET.EM_ALT_VENDOR_ID = SOURCE.EM_ALT_VENDOR_ID,
  TARGET.EM_ALT_VENDOR_NAME = SOURCE.EM_ALT_VENDOR_NAME,
  TARGET.EM_ALT_VENDOR_COUNTRY_CD = SOURCE.EM_ALT_VENDOR_COUNTRY_CD,
  TARGET.EM_VENDOR_ID = SOURCE.EM_VENDOR_ID,
  TARGET.EM_VENDOR_NAME = SOURCE.EM_VENDOR_NAME,
  TARGET.EM_VENDOR_COUNTRY_CD = SOURCE.EM_VENDOR_COUNTRY_CD,
  TARGET.MA_AMT = SOURCE.MA_AMT,
  TARGET.MA_MAX_AMT = SOURCE.MA_MAX_AMT,
  TARGET.UPDATE_DT = SOURCE.UPDATE_DT,
  TARGET.LOAD_DT = SOURCE.LOAD_DT
  WHEN MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_DELETE"
  AND TARGET.PRODUCT_ID = SOURCE.PRODUCT_ID
  AND TARGET.COUNTRY_CD = SOURCE.COUNTRY_CD
  AND TARGET.START_DT = SOURCE.START_DT
  AND TARGET.END_DT = SOURCE.END_DT
  AND TARGET.MA_EVENT_TYPE_ID = SOURCE.MA_EVENT_TYPE_ID
  AND TARGET.MA_EVENT_SOURCE_ID = SOURCE.MA_EVENT_SOURCE_ID
  AND TARGET.LOCATION_ID = SOURCE.LOCATION_ID
  AND TARGET.MA_EVENT_DESC = SOURCE.MA_EVENT_DESC
  AND TARGET.EM_VENDOR_FUNDING_ID = SOURCE.EM_VENDOR_FUNDING_ID
  AND TARGET.EM_COMMENT = SOURCE.EM_COMMENT
  AND TARGET.EM_BILL_ALT_VENDOR_FLAG = SOURCE.EM_BILL_ALT_VENDOR_FLAG
  AND TARGET.EM_ALT_VENDOR_ID = SOURCE.EM_ALT_VENDOR_ID
  AND TARGET.EM_ALT_VENDOR_NAME = SOURCE.EM_ALT_VENDOR_NAME
  AND TARGET.EM_ALT_VENDOR_COUNTRY_CD = SOURCE.EM_ALT_VENDOR_COUNTRY_CD
  AND TARGET.EM_VENDOR_ID = SOURCE.EM_VENDOR_ID
  AND TARGET.EM_VENDOR_NAME = SOURCE.EM_VENDOR_NAME
  AND TARGET.EM_VENDOR_COUNTRY_CD = SOURCE.EM_VENDOR_COUNTRY_CD
  AND TARGET.MA_AMT = SOURCE.MA_AMT
  AND TARGET.MA_MAX_AMT = SOURCE.MA_MAX_AMT
  AND TARGET.UPDATE_DT = SOURCE.UPDATE_DT
  AND TARGET.LOAD_DT = SOURCE.LOAD_DT THEN DELETE
  WHEN NOT MATCHED
  AND SOURCE.UPDATE_STRATEGY_FLAG = "DD_INSERT" THEN
INSERT
  (
    TARGET.MA_EVENT_ID,
    TARGET.PRODUCT_ID,
    TARGET.COUNTRY_CD,
    TARGET.START_DT,
    TARGET.END_DT,
    TARGET.MA_EVENT_TYPE_ID,
    TARGET.MA_EVENT_SOURCE_ID,
    TARGET.LOCATION_ID,
    TARGET.MA_EVENT_DESC,
    TARGET.EM_VENDOR_FUNDING_ID,
    TARGET.EM_COMMENT,
    TARGET.EM_BILL_ALT_VENDOR_FLAG,
    TARGET.EM_ALT_VENDOR_ID,
    TARGET.EM_ALT_VENDOR_NAME,
    TARGET.EM_ALT_VENDOR_COUNTRY_CD,
    TARGET.EM_VENDOR_ID,
    TARGET.EM_VENDOR_NAME,
    TARGET.EM_VENDOR_COUNTRY_CD,
    TARGET.MA_AMT,
    TARGET.MA_MAX_AMT,
    TARGET.UPDATE_DT,
    TARGET.LOAD_DT
  )
VALUES
  (
    SOURCE.MA_EVENT_ID,
    SOURCE.PRODUCT_ID,
    SOURCE.COUNTRY_CD,
    SOURCE.START_DT,
    SOURCE.END_DT,
    SOURCE.MA_EVENT_TYPE_ID,
    SOURCE.MA_EVENT_SOURCE_ID,
    SOURCE.LOCATION_ID,
    SOURCE.MA_EVENT_DESC,
    SOURCE.EM_VENDOR_FUNDING_ID,
    SOURCE.EM_COMMENT,
    SOURCE.EM_BILL_ALT_VENDOR_FLAG,
    SOURCE.EM_ALT_VENDOR_ID,
    SOURCE.EM_ALT_VENDOR_NAME,
    SOURCE.EM_ALT_VENDOR_COUNTRY_CD,
    SOURCE.EM_VENDOR_ID,
    SOURCE.EM_VENDOR_NAME,
    SOURCE.EM_VENDOR_COUNTRY_CD,
    SOURCE.MA_AMT,
    SOURCE.MA_MAX_AMT,
    SOURCE.UPDATE_DT,
    SOURCE.LOAD_DT
  )""")

# COMMAND ----------
# DBTITLE 1, MA_EVENT_RESTATE_HIST


spark.sql("""INSERT INTO
  MA_EVENT_RESTATE_HIST
SELECT
  LOAD_DT AS LOAD_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_DT AS LOAD_DT,
  LOAD_DT AS LOAD_DT,
  MA_EVENT_ID AS MA_EVENT_ID,
  MA_EVENT_ID AS MA_EVENT_ID,
  MA_EVENT_ID AS MA_EVENT_ID,
  MA_EVENT_ID AS MA_EVENT_ID,
  MA_EVENT_ID AS MA_EVENT_ID,
  NULL AS OFFER_ID,
  NULL AS SAP_DEPT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  PRODUCT_ID AS PRODUCT_ID,
  COUNTRY_CD AS COUNTRY_CD,
  START_DT AS START_DT,
  START_DT AS START_DT,
  START_DT AS START_DT,
  START_DT AS START_DT,
  START_DT AS START_DT,
  END_DT AS END_DT,
  END_DT AS END_DT,
  END_DT AS END_DT,
  END_DT AS END_DT,
  END_DT AS END_DT,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,
  LOCATION_ID AS LOCATION_ID,
  NULL AS MOVEMENT_ID,
  NULL AS VALUATION_CLASS_CD,
  NULL AS GL_ACCT_NBR,
  NULL AS LOCATION_TYPE_ID,
  ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,
  BRAND_CD AS BRAND_CD,
  MA_FORMULA_CD AS MA_FORMULA_CD,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO AS FISCAL_MO,
  NULL AS SAP_CATEGORY_ID,
  FROM_LOCATION_ID AS FROM_LOCATION_ID,
  NULL AS SOURCE_VENDOR_ID,
  NULL AS COMPANY_ID,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  MA_EVENT_DESC AS MA_EVENT_DESC,
  EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,
  EM_COMMENT AS EM_COMMENT,
  EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,
  EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,
  EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,
  EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,
  EM_VENDOR_ID AS EM_VENDOR_ID,
  EM_VENDOR_NAME AS EM_VENDOR_NAME,
  EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,
  NULL AS VENDOR_NAME_TXT,
  MA_PCT_IND AS MA_PCT_IND,
  MA_PCT_IND AS MA_PCT_IND,
  MA_PCT_IND AS MA_PCT_IND,
  ORIG_MA_AMT AS MA_AMT,
  MA_AMT AS MA_AMT,
  MA_AMT AS MA_AMT,
  ORIG_MA_AMT AS MA_AMT,
  MA_AMT AS MA_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  MA_MAX_AMT AS MA_MAX_AMT,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  o_LOAD_FLG AS INS_UPD_DEL_FLAG,
  INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,
  INS_UPD_DEL_FLAG_out AS INS_UPD_DEL_FLAG
FROM
  EXP_MA_EVENT_RESTATE_HIST_6""")